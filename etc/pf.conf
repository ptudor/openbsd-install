#       $OpenBSD: pf.conf,v 1.53 2014/01/25 10:28:36 dtucker Exp $
#
# See pf.conf(5) for syntax and examples.
# Remember to set net.inet.ip.forwarding=1 and/or net.inet6.ip6.forwarding=1
# in /etc/sysctl.conf if packets are to be forwarded between interfaces.

# increase default state limit from 10'000 states on busy systems
#set limit states 100000

set skip on lo

# filter rules and anchor for ftp-proxy(8)
#anchor "ftp-proxy/*"
#pass in quick inet proto tcp to port ftp divert-to 127.0.0.1 port 8021

# anchor for relayd(8)
#anchor "relayd/*"

block return    # block stateless traffic
pass            # establish keep-state

# rules for spamd(8)
#table <spamd-white> persist
#table <nospamd> persist file "/etc/mail/nospamd"
#pass in on egress proto tcp from any to any port smtp \
#    rdr-to 127.0.0.1 port spamd
#pass in on egress proto tcp from <nospamd> to any port smtp
#pass in log on egress proto tcp from <spamd-white> to any port smtp
#pass out log on egress proto tcp to any port smtp

tcp_services="{ 22, 25, 5061, 51234 }"
udp_services="{ 123, 5060, 51234, 546, 547 }"

# ssh scan
block in log quick on vr0 proto tcp from <sshscanners> to any port ssh
#pass in quick on nfe0 proto tcp from $pthome to $nfe0_ipv4addr port $nfe0_tcpports_ssh flags S/SA keep state queue(ssh_bulk, ssh_interactive) label "Permit SSH and count connections from $pthome"
#pass in on nfe0 proto tcp from any to $nfe0_ipv4addr port $nfe0_tcpports_ssh flags S/SA keep state (max-src-conn-rate 5/60, overload <sshscanners>) queue(ssh_bulk, ssh_interactive) label "Permit SSH and count connections"
pass in on egress proto tcp from any to any port 22 flags S/SA keep state (max-src-conn-rate 5/60, overload <sshscanners>) label "Permit SSH and count connections"


# spamd dynamic table
table <spamd-white> persist
#  pfctl -t static-whitelist -T replace -f /etc/spamd-whitelist.txt
##table <static-whitelist> persist file "/etc/spamd-whitelist.txt"
table <static-whitelist> persist file "/etc/mail/whitelist.txt"
#no rdr proto tcp from <spamd-white> to any port 25
#no rdr inet proto tcp from <static-whitelist> to any port 25
#rdr pass inet proto tcp from any to any port smtp -> 127.0.0.1 port spamd
###pass in on egress inet proto tcp from any to any port smtp rdr-to 127.0.0.1 port spamd
###pass in on egress inet proto tcp to (egress) port 25 rdr-to 127.0.0.1 port spamd
#pass in quick on egress inet6 proto tcp from <spamd-whitelist> to any port smtp rdr-to ::1 port smtp keep state
#pass in quick on egress inet6 proto tcp from <spamd-white> to any port smtp rdr-to ::1 port smtp keep state
pass in quick on egress inet proto tcp from <static-whitelist> to any port smtp rdr-to 127.0.0.1 port smtp keep state
pass in quick on egress inet proto tcp from <spamd-white> to any port smtp rdr-to 127.0.0.1 port smtp keep state
pass in quick on vr1 inet proto tcp from <static-whitelist> to any port smtp rdr-to 127.0.0.1 port smtp keep state
pass in quick on vr1 inet proto tcp from <spamd-white> to any port smtp rdr-to 127.0.0.1 port smtp keep state
#pass in quick on egress inet6 proto tcp from any to any port smtp rdr-to ::1 port spamd
pass in quick on egress inet proto tcp from any to any port smtp rdr-to 127.0.0.1 port spamd keep state
pass in quick on vr1 inet proto tcp from any to any port smtp rdr-to 127.0.0.1 port spamd keep state
pass out on egress proto tcp to any port smtp keep state
pass out on vr1 proto tcp to any port smtp keep state

pass quick proto {esp, ah } from any to any
pass in quick on egress proto udp from any to any port { 500, 4500, 1701} keep state
pass on enc0 from any to any keep state (if-bound)


# deny log and refuse telnet connection (example)
block return-rst in log proto tcp from any to (egress) port = 23 #queue rst
block return-rst in log proto tcp from any to (egress) port = 179 #queue rst
block return-rst in log proto tcp from any to (egress) port = 31337 #queue rst
# no log for auth
block return-rst in proto tcp from any to (egress) port = 113 #queue rst


pass in quick on egress inet6 proto tcp from any to any port $tcp_services keep state
pass in quick on egress inet6 proto udp from any to any port $udp_services keep state

pass in inet6 proto ipv6-icmp keep state

icmp6_types="{ 2, 128 }" # packet too big, echo request (ping6)
# Neighbor Discovery Protocol (NDP) (types 133-137):
#   Router Solicitation (RS), Router Advertisement (RA)
#   Neighbor Solicitation (NS), Neighbor Advertisement (NA)
#   Route Redirection
icmp6_types_ext_if="{ 128, 133, 134, 135, 136, 137 }"
# IPv6
pass in quick on egress inet6 proto ipv6-icmp icmp6-type \
        $icmp6_types keep state
pass in quick on egress inet6 proto ipv6-icmp from any to \
        (egress ) icmp6-type $icmp6_types_ext_if keep state

#block in quick from urpf-failed to any # use with care

# By default, do not permit remote connections to X11
block return in on ! lo0 proto tcp to port 6000:6010


